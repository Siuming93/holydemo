/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace RedDragon.Protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScPlayerStartMove : TBase
  {

    public long Id { get; set; }

    public double Time { get; set; }

    public PosInfo PosInfo { get; set; }

    public int Speed { get; set; }

    public ScPlayerStartMove() {
    }

    public ScPlayerStartMove(long id, double time, PosInfo posInfo, int speed) : this() {
      this.Id = id;
      this.Time = time;
      this.PosInfo = posInfo;
      this.Speed = speed;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        bool isset_time = false;
        bool isset_posInfo = false;
        bool isset_speed = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
                isset_id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Time = iprot.ReadDouble();
                isset_time = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PosInfo = new PosInfo();
                PosInfo.Read(iprot);
                isset_posInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Speed = iprot.ReadI32();
                isset_speed = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_id)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_time)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_posInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_speed)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScPlayerStartMove");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
        field.Name = "time";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Time);
        oprot.WriteFieldEnd();
        field.Name = "posInfo";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        PosInfo.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "speed";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Speed);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScPlayerStartMove(");
      __sb.Append(", Id: ");
      __sb.Append(Id);
      __sb.Append(", Time: ");
      __sb.Append(Time);
      __sb.Append(", PosInfo: ");
      __sb.Append(PosInfo== null ? "<null>" : PosInfo.ToString());
      __sb.Append(", Speed: ");
      __sb.Append(Speed);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
